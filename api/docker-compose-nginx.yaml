version: '3.9'

services:

  mybunkerized:
    image: bunkerity/bunkerized-nginx
    ports:
      - 80:8080
      - 443:8443
    volumes:
      # - ./certs:/etc/letsencrypt
      - ./server-confs:/server-confs:ro
      # - ./www:/www:ro
     # - ./nginx/global.env:/etc/nginx//global.env
    environment:
    #TODO add PUT DELETE request
      - DISABLE_DEFAULT_SERVER=no
      # - SERVER_NAME= user.doodle.fr poll.doodle.fr dashboard.doodle.fr
      - GENERATE_SELF_SIGNED_SSL=yes 
      #- AUTO_LETS_ENCRYPT=yes
      - USE_REVERSE_PROXY=yes
      - COOKIE_AUTO_SECURE_FLAG=yes
      - ALLOWED_METHODS=GET|POST|PUT|HEAD|DELETE
      #- USE_MODSECURITY=no
      - PROXY_REAL_IP=yes
    networks:
      - services-net
    depends_on:
      # - user_service
      - poll_service
      - dashboard_service
      - etherpad
      #- keycloak



##################   User   #####################################

  # db_User:
  #   image: mysql
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=root_User
  #     - MYSQL_DATABASE=user
  #     - MYSQL_USER=user_user
  #     - MYSQL_PASSWORD=user_pswd
  #   healthcheck:
  #     test: [ 'CMD', 'mysqladmin', 'ping', '-u', 'root', '-p root_User' ]
  #     interval: 20s
  #     timeout: 30s
  #     retries: 5
  #   networks:
  #     - services-net

  # user_service:
  #   image: quarkus/user-jvm:latest
  #   depends_on:
  #     db_User:
  #       condition: service_healthy
  #   ports:
  #     - "8081:8081"
  #   restart: on-failure
  #   networks:
  #     - services-net

##################   Dashboard   #####################################

  dashboarddb:
    image: mysql
    expose:
      - "3308"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=dashboard
      - MYSQL_USER=dashboard_user
      - MYSQL_PASSWORD=dashboard_pswd
      - MYSQL_TCP_PORT= 3308
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-u', 'root', '-p root' ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - dashboard_network

  dashboard_service:
    image: quarkus/dashboard-jvm:latest
    depends_on:
      dashboarddb:
        condition: service_healthy
    ports:
      - "8082:8080"
    restart: on-failure
    networks:
      - services-net
      - dashboard_network

##################   Poll   #####################################

  polldb:
    image: mysql
    ports:
      - "3307:3306"
    expose:
      - "3307"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=poll
      - MYSQL_USER=poll_user
      - MYSQL_PASSWORD=poll_pswd
      - MYSQL_TCP_PORT= 3307
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-u', 'root', '-p root' ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - poll_network

  poll_service:
    image: quarkus/poll-jvm:latest
    depends_on:
      polldb:
        condition: service_healthy
    ports:
      - "8083:8080"
    restart: on-failure
    networks:
      - services-net
      - poll_network

##################   Comment   #####################################
  
  commentdb:
    image: mysql
    ports:
      - "3309:3306"
    expose:
      - "3309"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=comment
      - MYSQL_USER=comment_user
      - MYSQL_PASSWORD=comment_pswd
      - MYSQL_TCP_PORT= 3309
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-u', 'root', '-p root' ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - poll_network

  commentservice:
    image: quarkus/comment-jvm:latest
    depends_on:
      commentdb:
        condition: service_healthy
      poll_service:
        condition: service_started
    ports:
      - "8081:8080"
    restart: on-failure
    networks:
      - poll_network
##################   Pad   #####################################

  etherpad:
    image: etherpad/etherpad:latest
    ports:
      - "9001:9001"
    volumes:
      - ./Poll/APIKEY.txt:/opt/etherpad-lite/APIKEY.txt
    networks:
      - services-net

##################   Keycloak   #####################################


  postgres:
      image: postgres
      volumes:
        - postgres_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password
  keycloak:
      image: jboss/keycloak
      #build: ./keycloak/
      volumes:
        - .keycloak/imports:/tmp/import
      command:
      - "-Dkeycloak.migration.action=import"
      - "-Dkeycloak.migration.provider=dir"
      - "-Dkeycloak.migration.dir=/tmp/import"
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        KEYCLOAK_IMPORT: /tmp/realm-export.json
      #  KEYCLOAK_IMPORT: /imports/realm-export.json #-Dkeycloak.profile.feature.upload_scripts=enabled
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
      ports:
        - 8085:8080
      depends_on:
        - postgres
      #volumes:
      #  - /imports/realm-export.json:/imports/realm-export.json

      ###TODO: pour set up le keycloak:
#      - se connecter à keycloak, 
#      - en haut à gauche, mettre le curseur sur "Master", puis cliquer sur add Realm
#      - ici, cliquer sur "import"
#      - mettre le fichier realm-export.json (qui est dans keycloak/imports)
#      - valider
#    ensuite il faut:
#     - aller dans Client
#     - cliquer sur nginx
#     - aller dans Credentials 
#     - cliquer sur Regenerate
#     - copier la clé
#     - aller dans le fichier front/src/app/pool-service.service
#     - remplacer la clé à la ligne 163 par la clé copiée
volumes:
  postgres_data:
      driver: local
   
    
networks:
  services-net:
  poll_network:
  dashboard_network: